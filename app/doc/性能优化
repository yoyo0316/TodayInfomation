
性能优化  --- 内存优化 CPU卡顿优化  布局优化

一、内存优化

面试问题：你了解Java内存模型么（Java7、8、9内存模型的区别）
https://www.jianshu.com/p/4455e4234d5c

java运行时内存分配详解
https://www.cnblogs.com/hewenwu/p/3662529.html

GC原理解析
https://blog.csdn.net/lilong329329/article/details/82222713

内存泄漏：
是指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。

如何定位内存泄漏？
1，Android studio
打开Android studio 选中 Terminal 选项卡，运行项目到真机上，进入主界面操作各个界面，然后重新进入主界面，这个时候项目中应该只有一个MainActivity 的实例

此时 在 Terminal 中输入

adb shell dumpsys meminfo com.yoyozhangh.github.todayinfomation -d

就有目前栈中所有的activity的实例，如果数量大于 1 说明有内存泄漏的界面

通过Monitors
打开Androidstudio ，选中 Monitors 选项卡，这个时候选中Memory, 生成 hprof 文件

重启 adb
adb kill-server
adb start-server

android studio 2.3 版本  Monitor --> memory --->Analyzer Task 分析内存泄漏

2,MAT
3,三方工具 leakcanary

哪些操作可能造成长期的内存泄漏？

<1> 静态变量引用非静态内部类
<2> 线程操作
<3> activity fragment 被静态持有
<4> 单例模式传入的activity 的context
<5> android 系统的内存泄漏
 当 sdk  版本 在 19 到 23 之间时，LeakCanary 会检测出系统软键盘有内存泄漏
 http://www.imooc.com/article/13913

<6> android 原生webView
目前还没有找到有效的解决办法，除非多进程运行

<7> 使用系统服务没有进行反注册
比如使用Android系统的传感器，要进行注册，但没有反注册有时也会造成内存泄漏，


哪些操作可能造成短期的内存泄漏？

OOM 的产生就是长期的内存泄漏 + 短期的内存泄漏 + 高压力的内存使用造成的

a, 多余的成员变量和临时变量
在Java中对象的引用是有作用域的，类中的成员变量会占用堆（heap）中一定的内存空间，如果该类持续被引用，
那么该类中无效的成员变量也会因为强引用而无法释放

b, 没有在合适的时候释放成员变量 相关场景 容器，bitmap 资源文件，IO 等 不使用时置为null或者清空的操作

c, 比较大的容器，即使关闭界面也会造成短期内存问题，虽然不会造成长期的内存泄漏


哪些操作可以减少内存使用压力？

1，较大的内存缓存类可以使用弱引用和软引用 如 Bitmap
2,字符串拼接尽量使用StringBuffer 和 StringBuilder
3，功能需要才去使用静态变量
4，大量的字符串存储建议使用文件存储，尽量不要使用 sp
5, 耗时操作要放到异步任务中
6，成员变量转化成局部变量，在适当的时机释放成员变量
7，尽量使用效率高的代码，比如增强for 循环，减少使用枚举
8，三种常见的布局优化
9，方法中尽量减少多余的局部变量
10，尽量 使用Android优化过的容器，比如SpareArray，SpareBooleanArray LongSpareArray ,但这种集合 的使用场景并不一定适用多数场景。
11，广播 和Service 的注册时机，并不一定是一进入App就去注册
12，三方库调研和对比，有些时候是某些库拖垮了我们的整个应用
13，多进程控制整个App的内存使用
14，三方图片 加载框架在加载图片质量要求不高时，尽量不使用8888
15，适当使用onTrimMemory 来 处理资源的释放。



二、 CPU 卡顿优化
采用 blockCanary 或者  Android studio 的 profile 中的 CPU 进行测试


三、布局优化
1，merge 标签的使用
merge 标签可以减少一层布局 比如 两个 FrameLayout

2，include

3，viewStub 懒加载的过程
